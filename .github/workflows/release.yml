name: Build and Release

# 触发条件：推送以 v 开头的标签（如 v1.0.0）
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # 目标平台：Linux、macOS、Windows（根据需求调整）
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: packmol-linux
            archive_ext: .tar.gz
          - os: macos-latest
            artifact_name: packmol-macos
            archive_ext: .tar.gz
          - os: windows-latest
            artifact_name: packmol-windows
            archive_ext: .zip

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 安装 Fortran 编译器（自动匹配系统）
      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc  # 使用 GCC 自带的 gfortran

      # 3. 编译项目（使用 Makefile）
      - name: Compile with Make
        run: |
          ./configure  # 运行配置脚本（你的仓库已包含）
          make         # 执行编译（生成 packmol 可执行文件）

      # 4. 打包可执行文件（根据平台调整格式）
      - name: Package executable
        run: |
          # Linux/macOS 使用 tar.gz，Windows 使用 zip
          if [ "$RUNNER_OS" == "Windows" ]; then
            7z a ${{ matrix.artifact_name }}${{ matrix.archive_ext }} packmol.exe
          else
            tar -czf ${{ matrix.artifact_name }}${{ matrix.archive_ext }} packmol
          fi

      # 5. 创建 GitHub Release 并上传资产
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ matrix.artifact_name }}${{ matrix.archive_ext }}
          asset_name: ${{ matrix.artifact_name }}${{ matrix.archive_ext }}
          asset_content_type: application/octet-stream
